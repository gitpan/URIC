# This file was automatically generated by SWIG
package URIC;
require Exporter;
require DynaLoader;
@ISA = qw(Exporter DynaLoader);
@EXPORT = qw(uri_mode uri_mode_set uri_modep uri_alloc_1 uri_alloc uri_realloc uri_free uri_info uri_scheme uri_host uri_port uri_path uri_params uri_query uri_frag uri_user uri_passwd uri_netloc uri_auth uri_auth_netloc uri_all_path uri_info_set uri_scheme_set uri_host_set uri_port_set uri_path_set uri_params_set uri_query_set uri_frag_set uri_user_set uri_passwd_set uri_copy uri_clone uri_clear uri_dump uri_furi uri_uri uri_object uri_furi_string uri_cannonicalize_string uri_cannonicalize uri_cannonical uri_parse uri_scheme_switch uri_consistent uri_abs uri_abs_1 uri_robots uri_gopher_type uri_gopher_selector uri_gopher_search uri_gopher_string uri_gopher_type_set uri_gopher_selector_set uri_gopher_search_set uri_gopher_string_set uri_nntp_group uri_nntp_article uri_nntp_group_set uri_nntp_article_set uri_wais_database uri_wais_wtype uri_wais_wpath uri_wais_database_set uri_wais_wtype_set uri_wais_wpath_set  

$URI_MODE_CANNONICAL
$URI_MODE_LOWER_SCHEME
$URI_MODE_ERROR_STDERR
$URI_MODE_FIELD_MALLOC
$URI_MODE_URI_STRICT
$URI_MODE_URI_STRICT_SCHEME
$URI_MODE_FLAG_DEFAULT
$URI_MODE_FLAG_NONE
$URI_INFO_CANNONICAL
$URI_INFO_URI
$URI_INFO_FURI
$URI_INFO_RELATIVE
$URI_INFO_RELATIVE_PATH
$URI_INFO_EMPTY
$URI_INFO_PARSED
$URI_INFO_ROBOTS
$URI_INFO_M_SCHEME
$URI_INFO_M_HOST
$URI_INFO_M_PORT
$URI_INFO_M_PATH
$URI_INFO_M_PARAMS
$URI_INFO_M_QUERY
$URI_INFO_M_FRAG
$URI_INFO_M_USER
$URI_INFO_M_PASSWD
$URI_INFO_FIELD_CHANGED
$URI_INFO_CANNONICAL_OK
$URI_INFO_PARSE_MASK
$URI_INFO_CACHE_MASK
$URI_INFO_M_MASK
$URI_INFO_COPY_MASK
$URI_ESCAPE_RESERVED
$URI_ESCAPE_PATH
$URI_ESCAPE_QUERY
$uri_escape_unsafe
$URI_FURI_REAL_PATH
$URI_FURI_NOP
$URI_STRING_FURI_STYLE
$URI_STRING_URI_STYLE
$URI_STRING_ROBOTS_STYLE
$URI_STRING_URI_NOHASH_STYLE
$uri_errstr
$URI_NOT_CANNONICAL
$URI_CANNONICAL
);
package URICc;
bootstrap URIC;
var_URIC_init();

# ---------- BASE METHODS -------------

package URIC;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package URIC;

*uri_mode = *URICc::uri_mode;
*uri_mode_set = *URICc::uri_mode_set;
*uri_modep = *URICc::uri_modep;
sub uri_alloc_1 {
    my @args = @_;
    my $result = URICc::uri_alloc_1(@args);
    return undef if (!defined($result));
    my %resulthash;
    tie %resulthash, "uri_t", $result;
    return bless \%resulthash, "uri_t";
}
sub uri_alloc {
    my @args = @_;
    my $result = URICc::uri_alloc(@args);
    return undef if (!defined($result));
    my %resulthash;
    tie %resulthash, "uri_t", $result;
    return bless \%resulthash, "uri_t";
}
sub uri_realloc {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_realloc(@args);
    return $result;
}
sub uri_free {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_free(@args);
    return $result;
}
sub uri_info {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_info(@args);
    return $result;
}
sub uri_scheme {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_scheme(@args);
    return $result;
}
sub uri_host {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_host(@args);
    return $result;
}
sub uri_port {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_port(@args);
    return $result;
}
sub uri_path {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_path(@args);
    return $result;
}
sub uri_params {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_params(@args);
    return $result;
}
sub uri_query {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_query(@args);
    return $result;
}
sub uri_frag {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_frag(@args);
    return $result;
}
sub uri_user {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_user(@args);
    return $result;
}
sub uri_passwd {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_passwd(@args);
    return $result;
}
sub uri_netloc {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_netloc(@args);
    return $result;
}
sub uri_auth {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_auth(@args);
    return $result;
}
sub uri_auth_netloc {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_auth_netloc(@args);
    return $result;
}
sub uri_all_path {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_all_path(@args);
    return $result;
}
sub uri_info_set {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_info_set(@args);
    return $result;
}
sub uri_scheme_set {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_scheme_set(@args);
    return $result;
}
sub uri_host_set {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_host_set(@args);
    return $result;
}
sub uri_port_set {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_port_set(@args);
    return $result;
}
sub uri_path_set {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_path_set(@args);
    return $result;
}
sub uri_params_set {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_params_set(@args);
    return $result;
}
sub uri_query_set {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_query_set(@args);
    return $result;
}
sub uri_frag_set {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_frag_set(@args);
    return $result;
}
sub uri_user_set {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_user_set(@args);
    return $result;
}
sub uri_passwd_set {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_passwd_set(@args);
    return $result;
}
sub uri_copy {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    $args[1] = tied(%{$args[1]});
    my $result = URICc::uri_copy(@args);
    return $result;
}
sub uri_clone {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_clone(@args);
    return undef if (!defined($result));
    my %resulthash;
    tie %resulthash, "uri_t", $result;
    return bless \%resulthash, "uri_t";
}
sub uri_clear {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_clear(@args);
    return $result;
}
sub uri_dump {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_dump(@args);
    return $result;
}
sub uri_furi {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_furi(@args);
    return $result;
}
sub uri_uri {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_uri(@args);
    return $result;
}
*uri_escape = *URICc::uri_escape;
*uri_unescape = *URICc::uri_unescape;
sub uri_object {
    my @args = @_;
    my $result = URICc::uri_object(@args);
    return undef if (!defined($result));
    my %resulthash;
    tie %resulthash, "uri_t", $result;
    return bless \%resulthash, "uri_t";
}
*uri_furi_string = *URICc::uri_furi_string;
*uri_cannonicalize_string = *URICc::uri_cannonicalize_string;
sub uri_cannonicalize {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_cannonicalize(@args);
    return $result;
}
sub uri_cannonical {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_cannonical(@args);
    return undef if (!defined($result));
    my %resulthash;
    tie %resulthash, "uri_t", $result;
    return bless \%resulthash, "uri_t";
}
sub uri_parse {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_parse(@args);
    return $result;
}
sub uri_scheme_switch {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_scheme_switch(@args);
    return $result;
}
sub uri_consistent {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_consistent(@args);
    return $result;
}
sub uri_abs {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_abs(@args);
    return undef if (!defined($result));
    my %resulthash;
    tie %resulthash, "uri_t", $result;
    return bless \%resulthash, "uri_t";
}
sub uri_abs_1 {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    $args[1] = tied(%{$args[1]});
    my $result = URICc::uri_abs_1(@args);
    return undef if (!defined($result));
    my %resulthash;
    tie %resulthash, "uri_t", $result;
    return bless \%resulthash, "uri_t";
}
sub uri_robots {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_robots(@args);
    return $result;
}
sub uri_gopher_type {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_gopher_type(@args);
    return $result;
}
sub uri_gopher_selector {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_gopher_selector(@args);
    return $result;
}
sub uri_gopher_search {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_gopher_search(@args);
    return $result;
}
sub uri_gopher_string {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_gopher_string(@args);
    return $result;
}
sub uri_gopher_type_set {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_gopher_type_set(@args);
    return $result;
}
sub uri_gopher_selector_set {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_gopher_selector_set(@args);
    return $result;
}
sub uri_gopher_search_set {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_gopher_search_set(@args);
    return $result;
}
sub uri_gopher_string_set {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_gopher_string_set(@args);
    return $result;
}
sub uri_nntp_group {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_nntp_group(@args);
    return $result;
}
sub uri_nntp_article {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_nntp_article(@args);
    return $result;
}
sub uri_nntp_group_set {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_nntp_group_set(@args);
    return $result;
}
sub uri_nntp_article_set {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_nntp_article_set(@args);
    return $result;
}
sub uri_wais_database {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_wais_database(@args);
    return $result;
}
sub uri_wais_wtype {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_wais_wtype(@args);
    return $result;
}
sub uri_wais_wpath {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_wais_wpath(@args);
    return $result;
}
sub uri_wais_database_set {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_wais_database_set(@args);
    return $result;
}
sub uri_wais_wtype_set {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_wais_wtype_set(@args);
    return $result;
}
sub uri_wais_wpath_set {
    my @args = @_;
    $args[0] = tied(%{$args[0]});
    my $result = URICc::uri_wais_wpath_set(@args);
    return $result;
}

############# Class : uri_t ##############

package uri_t;
@ISA = qw( URIC );
%OWNER = ();
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
    };

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
    };


# ------- VARIABLE STUBS --------

package URIC;

*URI_MODE_CANNONICAL = *URICc::URI_MODE_CANNONICAL;
*URI_MODE_LOWER_SCHEME = *URICc::URI_MODE_LOWER_SCHEME;
*URI_MODE_ERROR_STDERR = *URICc::URI_MODE_ERROR_STDERR;
*URI_MODE_FIELD_MALLOC = *URICc::URI_MODE_FIELD_MALLOC;
*URI_MODE_URI_STRICT = *URICc::URI_MODE_URI_STRICT;
*URI_MODE_URI_STRICT_SCHEME = *URICc::URI_MODE_URI_STRICT_SCHEME;
*URI_MODE_FLAG_DEFAULT = *URICc::URI_MODE_FLAG_DEFAULT;
*URI_MODE_FLAG_NONE = *URICc::URI_MODE_FLAG_NONE;
*URI_INFO_CANNONICAL = *URICc::URI_INFO_CANNONICAL;
*URI_INFO_URI = *URICc::URI_INFO_URI;
*URI_INFO_FURI = *URICc::URI_INFO_FURI;
*URI_INFO_RELATIVE = *URICc::URI_INFO_RELATIVE;
*URI_INFO_RELATIVE_PATH = *URICc::URI_INFO_RELATIVE_PATH;
*URI_INFO_EMPTY = *URICc::URI_INFO_EMPTY;
*URI_INFO_PARSED = *URICc::URI_INFO_PARSED;
*URI_INFO_ROBOTS = *URICc::URI_INFO_ROBOTS;
*URI_INFO_M_SCHEME = *URICc::URI_INFO_M_SCHEME;
*URI_INFO_M_HOST = *URICc::URI_INFO_M_HOST;
*URI_INFO_M_PORT = *URICc::URI_INFO_M_PORT;
*URI_INFO_M_PATH = *URICc::URI_INFO_M_PATH;
*URI_INFO_M_PARAMS = *URICc::URI_INFO_M_PARAMS;
*URI_INFO_M_QUERY = *URICc::URI_INFO_M_QUERY;
*URI_INFO_M_FRAG = *URICc::URI_INFO_M_FRAG;
*URI_INFO_M_USER = *URICc::URI_INFO_M_USER;
*URI_INFO_M_PASSWD = *URICc::URI_INFO_M_PASSWD;
*URI_INFO_FIELD_CHANGED = *URICc::URI_INFO_FIELD_CHANGED;
*URI_INFO_CANNONICAL_OK = *URICc::URI_INFO_CANNONICAL_OK;
*URI_INFO_PARSE_MASK = *URICc::URI_INFO_PARSE_MASK;
*URI_INFO_CACHE_MASK = *URICc::URI_INFO_CACHE_MASK;
*URI_INFO_M_MASK = *URICc::URI_INFO_M_MASK;
*URI_INFO_COPY_MASK = *URICc::URI_INFO_COPY_MASK;
*URI_ESCAPE_RESERVED = *URICc::URI_ESCAPE_RESERVED;
*URI_ESCAPE_PATH = *URICc::URI_ESCAPE_PATH;
*URI_ESCAPE_QUERY = *URICc::URI_ESCAPE_QUERY;
*uri_escape_unsafe = *URICc::uri_escape_unsafe;
*URI_FURI_REAL_PATH = *URICc::URI_FURI_REAL_PATH;
*URI_FURI_NOP = *URICc::URI_FURI_NOP;
*URI_STRING_FURI_STYLE = *URICc::URI_STRING_FURI_STYLE;
*URI_STRING_URI_STYLE = *URICc::URI_STRING_URI_STYLE;
*URI_STRING_ROBOTS_STYLE = *URICc::URI_STRING_ROBOTS_STYLE;
*URI_STRING_URI_NOHASH_STYLE = *URICc::URI_STRING_URI_NOHASH_STYLE;
*uri_errstr = *URICc::uri_errstr;
*URI_NOT_CANNONICAL = *URICc::URI_NOT_CANNONICAL;
*URI_CANNONICAL = *URICc::URI_CANNONICAL;
1;
