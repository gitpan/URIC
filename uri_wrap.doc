uri_wrap.c

[ Module : uri, Package : uri ]


$URI_MODE_CANNONICAL = 0x01
        [ Constant: int  ]
        * When an error occur, print the error on stderr 

$URI_MODE_ERROR_STDERR = 0x02
        [ Constant: int  ]
        * If uri_mode is not set the following parameters are in use *
        just as if uri_mode(URI_MODE_FLAG_DEFAULT) * was called. 

$URI_MODE_FLAG_DEFAULT = ((0x01)|(0x02))
        [ Constant: int  ]
        * Set library wide mode 

uri_mode(flag);
        [ returns void  ]
        * True if flag is set in library wide mode 

uri_modep(flag);
        [ returns int  ]

$URI_INFO_CANNONICAL = 0x0001
        [ Constant: int  ]
        * Set if the private uri field is allocated. 

$URI_INFO_URI = 0x0002
        [ Constant: int  ]
        * Set if the private furi field is allocated. 

$URI_INFO_FURI = 0x0004
        [ Constant: int  ]
        * Set if the URI is relative. 

$URI_INFO_RELATIVE = 0x0008
        [ Constant: int  ]
        * Set if the URI is relative and the path is relative. 

$URI_INFO_RELATIVE_PATH = 0x0010
        [ Constant: int  ]
        * Set if the URI is a null string. 

$URI_INFO_EMPTY = 0x0020
        [ Constant: int  ]
        * Set if the URI has been parsed successfully 

$URI_INFO_PARSED = 0x0040
        [ Constant: int  ]
        * Set if the scheme is FILE. 

$URI_INFO_FILE = 0x0200
        [ Constant: int  ]
        * Set if the URI is a robots.txt URI 

$URI_INFO_ROBOTS = 0x0400
        [ Constant: int  ]

1.  class uri_t
===============
[ created from struct uri_t ]

Public fields 

$this->{info}
        [ Member data: returns int  ]
        Information 

$this->{scheme}
        [ Member data: returns char * ]
        URI scheme (http, ftp...) 

$this->{host}
        [ Member data: returns char * ]
        hostname part (www.foo.com) 

$this->{port}
        [ Member data: returns char * ]
        port part if any (www.foo.com:8080 => 8080) 

$this->{path}
        [ Member data: returns char * ]
        path portion without params and query 

$this->{params}
        [ Member data: returns char * ]
        params part (/foo;dir/bar => foo) 

$this->{query}
        [ Member data: returns char * ]
        query part (/foo?bar=val => bar=val) 

$this->{frag}
        [ Member data: returns char * ]
        frag part (/foo#part => part) 

$this->{user}
        [ Member data: returns char * ]
        user part (http://user:pass@www.foo.com => user) 

$this->{passwd}
        [ Member data: returns char * ]
        user part (http://user:pass@www.foo.com => pass) 

$this->{pool}
        [ Member data: returns char * ]

$this->{pool_size}
        [ Member data: returns int  ]

$this->{furi}
        [ Member data: returns char * ]

$this->{furi_size}
        [ Member data: returns int  ]

$this->{uri}
        [ Member data: returns char * ]

$this->{uri_size}
        [ Member data: returns int  ]

$this->{robots}
        [ Member data: returns char * ]

$this->{robots_size}
        [ Member data: returns int  ]

$this->{desc}
        [ Member data: returns struct uri_scheme_desc * ]

----------

uri_alloc(uri,uri_length);
        [ returns uri_t * ]

uri_realloc(object,uri,uri_length);
        [ returns int  ]
        * Release object allocated by uri_alloc 

uri_free(object);
        [ returns void  ]

uri_abs(base,relative_string,relative_length);
        [ returns uri_t * ]

uri_abs_1(base,relative);
        [ returns uri_t * ]

uri_port(object);
        [ returns char * ]

uri_netloc(object);
        [ returns char * ]

uri_auth(object);
        [ returns char * ]

uri_all_path(object);
        [ returns char * ]

uri_copy(to,from);
        [ returns void  ]
        * Show fields on stderr. 

uri_dump(object);
        [ returns void  ]

uri_furi(object);
        [ returns char * ]
        * URI string 

uri_uri(object);
        [ returns char * ]
        * robots.txt URI corresponding to this URI. 

uri_robots(object);
        [ returns char * ]

uri2object(uri,uri_length);
        [ returns uri_t * ]

$URI_FURI_REAL_PATH = 1
        [ Constant: int  ]
        * Do not prepend anything to the FURI. 

$URI_FURI_NOP = 0
        [ Constant: int  ]
        * Equivalent to uri_furi(uri_object(uri, strlen(uri))) 

uri_furi_string(uri,uri_length,flag);
        [ returns char * ]

$URI_STRING_FURI_STYLE = 0x01
        [ Constant: int  ]
        * Return an URI 

$URI_STRING_URI_STYLE = 0x02
        [ Constant: int  ]
        * Return the robots.txt URI corresponding to this URI 

$URI_STRING_ROBOTS_STYLE = 0x04
        [ Constant: int  ]
        * Omit the frag in the returned string. 

$URI_STRING_URI_NOHASH_STYLE = 0x08
        [ Constant: int  ]
        * Cannonicalize the given uri and return it in the chosen form.
        

uri_cannonicalize_string(uri,uri_length,flag);
        [ returns char * ]

$uri_errstr
        [ Global : char * uri_errstr ]

$URI_NOT_CANNONICAL = -1
        [ Constant: int  ]

$URI_CANNONICAL = 0
        [ Constant: int  ]
        * Possible values of the info field in the uri_t structure. 

$URI_CANNONICALIZE_TEST = 0x01
        [ Constant: int  ]
        * Transform object in cannonical form 

$URI_CANNONICALIZE_TRANSFORM = 0x02
        [ Constant: int  ]
        * Implement cannonicalization of URI 

uri_cannonicalize(object,flag);
        [ returns int  ]

uri_parse(object);
        [ returns int  ]

